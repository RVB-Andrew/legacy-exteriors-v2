---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { Widget } from '~/types';

export interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  services?: Array<{
    title: string;
    description: string;
    image?: string; // Image source
    icon?: string; // Optional icon
    callToAction?: {
      text: string;
      href: string;
      icon?: string;
    };
    classes?: Record<string, string>;
  }>;
  columns?: number;
  highlight?: boolean;
  viewAllButton?: {
    enabled: boolean;
    text: string;
    href: string;
    icon?: string;
  };
  classes?: {
    container?: string;
    title?: string;
    subtitle?: string;
    card?: string;
    cardContent?: string;
    image?: string;
  };
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  services = [],
  columns = 3,
  highlight = false,
  viewAllButton = { enabled: false },
  classes = {},
  id,
  isDark = false,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl mb-4 md:mb-8',
      title: 'text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading',
      subtitle: 'max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400',
    }}
  />

  <div
    class={twMerge(
      `grid gap-6 md:gap-8 ${
        columns === 4
          ? 'sm:grid-cols-2 lg:grid-cols-4'
          : columns === 3
          ? 'sm:grid-cols-2 lg:grid-cols-3'
          : columns === 2
          ? 'sm:grid-cols-2'
          : 'sm:grid-cols-1'
      }`,
      classes?.container
    )}
  >
    {
      services.map((service) => (
        <div
          class={twMerge(
            'relative flex flex-col p-0 rounded-xl hover:shadow-lg border border-gray-200 dark:border-gray-700 shadow-md overflow-hidden group transition-all duration-300 bg-white dark:bg-slate-900 h-full intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade',
            classes?.card,
            service.classes?.card
          )}
        >
          {service.image && (
            <div class="relative h-52 overflow-hidden">
              <Image
                src={service.image}
                class={twMerge(
                  'w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 ease-in-out',
                  classes?.image,
                  service.classes?.image
                )}
                widths={[400, 900]}
                width={900}
                height={450}
                alt={service.title}
                aspectRatio="16:9"
                layout="cover"
                loading="lazy"
                decoding="async"
              />
              {highlight && <div class="absolute inset-0 bg-primary/10 dark:bg-primary/20" />}
              {service.icon && (
                <div class="absolute right-4 top-4 bg-white dark:bg-slate-900 p-3 rounded-full shadow-md">
                  <Icon
                    name={service.icon}
                    class={twMerge('w-6 h-6 text-primary', service.classes?.icon)}
                  />
                </div>
              )}
            </div>
          )}
          
          <div class={twMerge('flex flex-col p-6 flex-grow', classes?.cardContent, service.classes?.cardContent)}>
            <h3 class="text-xl font-bold mb-2">{service.title}</h3>
            <p class="text-muted flex-grow mb-4">{service.description}</p>
            
            {service.callToAction && (
              <div class="pt-2 mt-auto">
                <Button 
                  variant="primary" 
                  href={service.callToAction.href} 
                  text={service.callToAction.text} 
                  icon={service.callToAction.icon || "tabler:arrow-right"}
                  class="w-full justify-center"
                />
              </div>
            )}
          </div>
        </div>
      ))
    }
  </div>

  {viewAllButton.enabled && (
    <div class="flex justify-center mt-8">
      <Button
        variant="secondary"
        href={viewAllButton.href}
        text={viewAllButton.text || "View All Services"}
        icon={viewAllButton.icon || "tabler:arrow-right"}
      />
    </div>
  )}
</WidgetWrapper>