---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import { twMerge } from 'tailwind-merge';
import type { Widget } from '~/types';

// Import project data
import { projectGallery, getFeaturedProjects } from '~/data/projects/projects';

export interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  featuredOnly?: boolean;
  limit?: number;
  callToAction?: {
    text: string;
    href: string;
    icon?: string;
    variant?: 'primary' | 'secondary' | 'tertiary' | 'link';
  };
  classes?: {
    container?: string;
    headline?: string;
    gallery?: string;
    item?: string;
  };
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  featuredOnly = false,
  limit = 6,
  callToAction = {
    text: 'View All Projects',
    href: '/our-work',
    icon: 'tabler:arrow-right',
    variant: 'secondary',
  },
  classes = {},
  id,
  isDark = false,
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Determine which projects to use and limit the number
const displayProjects = featuredOnly 
  ? getFeaturedProjects(limit)
  : projectGallery.slice(0, limit);

// Generate unique gallery ID to avoid conflicts with multiple instances
const galleryId = `gallery-widget-${Math.random().toString(36).substring(2, 11)}`;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl mb-8',
      title: 'text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading',
      subtitle: 'max-w-3xl mx-auto sm:text-center text-xl text-muted',
    }}
  />

  <div
    class={twMerge(`grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 pswp-gallery`, classes?.gallery)}
    id={galleryId}
  >
    {displayProjects.map((project, index) => (
      <a
        href={typeof project.image === 'string' ? project.image : project.image.src}
        data-pswp-width={typeof project.image !== 'string' ? project.image.width : 1200}
        data-pswp-height={typeof project.image !== 'string' ? project.image.height : 800}
        class={twMerge(
          `relative rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 group bg-gray-200 dark:bg-slate-800 aspect-[4/3] intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade`,
          classes?.item
        )}
        style={{ animationDelay: `${index * 100}ms` }}
      >
        <Image
          src={project.image}
          class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500 ease-in-out gallery-thumbnail"
          alt={project.alt || 'Project thumbnail'}
          loading={index < 4 ? 'eager' : 'lazy'}
          decoding="async"
        />
        <div class="absolute inset-0 bg-black/0 group-hover:bg-black/30 transition-colors duration-300"></div>
        {project.category && (
          <div class="absolute bottom-0 left-0 w-full bg-gradient-to-t from-black/80 to-transparent p-4">
            <span class="inline-block px-2 py-1 bg-primary text-white text-xs font-medium rounded mb-2">
              {project.category}
            </span>
          </div>
        )}
      </a>
    ))}
  </div>

  <div class="flex justify-center mt-10 intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
    <Button
      variant={callToAction.variant || 'secondary'}
      href={callToAction.href}
      text={callToAction.text}
      icon={callToAction.icon}
    />
  </div>
</WidgetWrapper>

<script>
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import 'photoswipe/style.css';

  function initializeGalleries() {
    // Find all gallery containers
    const galleryContainers = document.querySelectorAll('[id^="gallery-widget-"]');
    
    galleryContainers.forEach((container) => {
      if (!container || !container.id) return;
      
      // Initialize PhotoSwipe for this gallery
      const lightbox = new PhotoSwipeLightbox({
        gallery: `#${container.id}`,
        children: 'a',
        showHideAnimationType: 'fade',
        bgClickAction: 'close',
        tapAction: 'close',
        pswpModule: () => import('photoswipe'),
        maxZoomLevel: 2,
        initialZoomLevel: 'fit'
      });
  
      lightbox.init();
    });
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initializeGalleries);
  
  // Initialize after Astro page transitions
  document.addEventListener('astro:page-load', initializeGalleries);
</script>

<style>
  /* Make sure PhotoSwipe controls are visible even on large images */
  .pswp__top-bar,
  .pswp__caption,
  .pswp__button {
    z-index: 1500;
  }
  
  /* This helps with the initial loading of images in the gallery */
  .gallery-thumbnail {
    transition: opacity 0.3s ease-in-out;
  }
</style>