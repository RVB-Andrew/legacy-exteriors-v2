---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import { Icon } from 'astro-icon/components';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  images = [],
  image = await Astro.slots.render('image'),
  
  // Reviews options
  showReviews = false,
  reviewsRating = 4.9,
  reviewsCount = 150,
  
  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;

const sliderImages = images.length > 0 ? images : (image ? [image] : []);
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg && <Fragment set:html={bg} />}
    </slot>
  </div>
  
  <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20 lg:py-0 lg:flex lg:items-center lg:h-screen lg:gap-8">
      <div class="basis-1/2 text-center lg:text-left pb-10 md:pb-16 mx-auto">
        {
          tagline && (
            <p
              class="text-base text-secondary dark:text-green-600 font-bold tracking-wide uppercase intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter flex items-center justify-center lg:justify-start"
            >
              <Icon name="tabler:backhoe" class="w-5 h-5 mr-2 inline-block text-green-600" />
              <span set:html={tagline} />
            </p>
          )
        }
        {
          title && (
            <h1
              class="text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200 intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto lg:max-w-none">
          {
            subtitle && (
              <p
                class="text-xl text-muted mb-6 dark:text-slate-300 intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter"
                set:html={subtitle}
              />
            )
          }

          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 lg:justify-start lg:m-0 lg:max-w-7xl intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
        
        <!-- Google Reviews Section -->
        {showReviews && (
          <div class="mt-6 lg:mt-4 inline-flex items-center px-4 py-2 bg-white/80 dark:bg-gray-700/80 rounded-lg backdrop-blur-sm intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade intersect-quarter">
            <div class="flex items-center space-x-1 rtl:space-x-reverse">
              <div class="flex items-center">
                {[...Array(5)].map((_, i) => (
                  <Icon 
                    name={i < Math.floor(reviewsRating) 
                      ? "tabler:star-filled" 
                      : (i < Math.floor(reviewsRating) + 0.5 && reviewsRating % 1 >= 0.5)
                        ? "tabler:star-half-filled"
                        : "tabler:star"
                    } 
                    class="w-4 h-4 text-yellow-400" 
                  />
                ))}
              </div>
              
              <p class="text-sm text-gray-800 dark:text-white font-medium">
                {reviewsRating.toFixed(1)}
                <span class="text-sm font-normal text-gray-600 dark:text-gray-300 ml-1">
                  ({reviewsCount} Google Reviews)
                </span>
              </p>
            </div>
          </div>
        )}
        
        <!-- Additional content slot -->
        <slot name="content-after" />
      </div>
      
      <div class="basis-1/2">
        {/* Image display - either slider or single image */}
        <div class="relative m-auto max-w-5xl intersect-once intercept-no-queue motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter">
          {sliderImages.length > 0 ? (
            <div class="hero-slider-container relative overflow-hidden rounded-md shadow-lg h-full">
              <div class="hero-slider-wrapper flex">
                {sliderImages.map((img, index) => (
                  <div class="hero-slide w-full flex-shrink-0">
                    <Image
                      class="mx-auto w-full h-full object-cover"
                      widths={[400, 768, 1024, 2040]}
                      sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                      loading={index === 0 ? "eager" : "lazy"}
                      {...img}
                    />
                  </div>
                ))}
              </div>
              
              {sliderImages.length > 1 && (
                <>
                  <button 
                    class="slider-nav-btn slider-prev absolute left-4 top-1/2 -translate-y-1/2 bg-white/80 dark:bg-green-800/80 rounded-full p-2 shadow-lg transition-all duration-300 focus:outline-none z-10 opacity-0 group-hover:opacity-100"
                    aria-label="Previous slide"
                  >
                    <Icon name="tabler:chevron-left" class="w-6 h-6 text-primary dark:text-gray-200" />
                  </button>
                  <button 
                    class="slider-nav-btn slider-next absolute right-4 top-1/2 -translate-y-1/2 bg-white/80 dark:bg-green-800/80 rounded-full p-2 shadow-lg transition-all duration-300 focus:outline-none z-10 opacity-0 group-hover:opacity-100"
                    aria-label="Next slide"
                  >
                    <Icon name="tabler:chevron-right" class="w-6 h-6 text-primary dark:text-gray-200" />
                  </button>
                  
                  <div class="slider-pagination absolute -bottom-2 left-0 right-0 flex justify-center gap-2 py-4">
                    {sliderImages.map((_, index) => (
                      <button 
                        class="slider-dot w-3 h-3 rounded-full bg-gray-300 dark:bg-gray-600 hover:bg-primary dark:hover:bg-green-600 transition-all duration-300 focus:outline-none"
                        data-index={index}
                        aria-label={`Go to slide ${index + 1}`}
                      ></button>
                    ))}
                  </div>
                </>
              )}
            </div>
          ) : (
            <div class="bg-gray-200 dark:bg-gray-700 rounded-md w-full h-full min-h-[300px] flex items-center justify-center">
              <p class="text-gray-500 dark:text-gray-400">No image provided</p>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('astro:page-load', initSliders);
  document.addEventListener('DOMContentLoaded', initSliders);

  function initSliders() {
    try {
      const sliderContainers = document.querySelectorAll<HTMLElement>('.hero-slider-container');
      
      sliderContainers.forEach((container) => {
        const wrapper = container.querySelector<HTMLElement>('.hero-slider-wrapper');
        if (!wrapper) return; // Early return if wrapper not found
        
        const slides = container.querySelectorAll<HTMLElement>('.hero-slide');
        const prevBtn = container.querySelector<HTMLButtonElement>('.slider-prev');
        const nextBtn = container.querySelector<HTMLButtonElement>('.slider-next');
        const dots = container.querySelectorAll<HTMLButtonElement>('.slider-dot');
        
        if (slides.length <= 1) return;
        
        let currentIndex = 0;
        let autoAdvanceInterval: number | undefined;
        let touchStartX = 0;
        let touchEndX = 0;
        
        container.classList.add('group');
        
        updateSlider();
        
        startAutoAdvance();
        
        if (prevBtn) {
          prevBtn.addEventListener('click', () => {
            goToSlide((currentIndex - 1 + slides.length) % slides.length);
          });
        }
        
        if (nextBtn) {
          nextBtn.addEventListener('click', () => {
            goToSlide((currentIndex + 1) % slides.length);
          });
        }
        
        dots.forEach((dot, index) => {
          dot.addEventListener('click', () => {
            goToSlide(index);
          });
        });
        
        container.addEventListener('mouseenter', () => {
          stopAutoAdvance();
        });
        
        container.addEventListener('mouseleave', () => {
          startAutoAdvance();
        });

        container.addEventListener('touchstart', (e: TouchEvent) => {
          if (e.changedTouches[0]) {
            touchStartX = e.changedTouches[0].screenX;
            stopAutoAdvance();
          }
        }, { passive: true });
        
        container.addEventListener('touchend', (e: TouchEvent) => {
          if (e.changedTouches[0]) {
            touchEndX = e.changedTouches[0].screenX;
            handleSwipe();
            startAutoAdvance();
          }
        }, { passive: true });

        container.setAttribute('tabindex', '0');
        container.addEventListener('keydown', (e: KeyboardEvent) => {
          if (e.key === 'ArrowLeft') {
            goToSlide((currentIndex - 1 + slides.length) % slides.length);
          } else if (e.key === 'ArrowRight') {
            goToSlide((currentIndex + 1) % slides.length);
          }
        });
        
        function startAutoAdvance() {
          stopAutoAdvance(); 
          autoAdvanceInterval = window.setInterval(() => {
            goToSlide((currentIndex + 1) % slides.length);
          }, 4000);
        }
        
        function stopAutoAdvance() {
          if (autoAdvanceInterval) {
            window.clearInterval(autoAdvanceInterval);
          }
        }
        
        function goToSlide(index: number) {
          if (index === currentIndex) return;
          
          if (wrapper) {
            wrapper.classList.add('transition-transform', 'duration-500', 'ease-in-out');
          }
          
          currentIndex = index;
          updateSlider();
          
          if (autoAdvanceInterval) {
            stopAutoAdvance();
            startAutoAdvance();
          }
        }

        function handleSwipe() {
          const threshold = 50;
          if (touchStartX - touchEndX > threshold) {
            goToSlide((currentIndex + 1) % slides.length);
          } else if (touchEndX - touchStartX > threshold) {
            goToSlide((currentIndex - 1 + slides.length) % slides.length);
          }
        }
        
        function updateSlider() {
          if (wrapper && wrapper.style) {
            wrapper.style.transform = `translateX(-${currentIndex * 100}%)`;
          }
          
          dots.forEach((dot, index) => {
            if (index === currentIndex) {
              dot.classList.add('bg-primary', 'scale-125');
              dot.classList.remove('bg-gray-300', 'dark:bg-gray-600');
            } else {
              dot.classList.remove('bg-primary', 'scale-125');
              dot.classList.add('bg-gray-300', 'dark:bg-gray-600');
            }
          });
        }
      });
    } catch (error) {
      console.error('Error initializing hero slider:', error);
    }
  }

  document.addEventListener('astro:after-swap', initSliders);
</script>

<style>
  .hero-slider-container {
    width: 100%;
    overflow: hidden;
    position: relative;
  }
  
  .hero-slider-wrapper {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }
  
  .hero-slide {
    width: 100%;
    flex-shrink: 0;
  }

  @media (hover: hover) {
    .slider-nav-btn {
      opacity: 0;
      transition: opacity 0.3s ease, background-color 0.3s ease;
    }
    
    .hero-slider-container:hover .slider-nav-btn {
      opacity: 1;
    }
  }

  @media (hover: none) {
    .slider-nav-btn {
      opacity: 0.8;
    }
  }
</style>