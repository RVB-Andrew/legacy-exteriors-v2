---
import { Icon } from 'astro-icon/components';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import Button from '~/components/ui/Button.astro';
import type { Widget } from '~/types';

export interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  testimonials?: Array<{
    name?: string;
    job?: string;
    testimonial?: string;
    rating?: number; // Rating out of 5 (optional)
    date?: string; // Optional date of review
    highlight?: boolean; // Whether to highlight this testimonial
    verifiedCustomer?: boolean; // If they're a verified customer
    source?: string; // Where the review is from (e.g., "Google", "Facebook")
  }>;
  callToAction?: {
    text?: string;
    href?: string;
    icon?: string;
  };
  googleBranding?: boolean; // Whether to show Google branding
  totalReviews?: {
    count?: number; // Total number of reviews
    average?: number; // Average rating (1-5)
  };
  reviewUrl?: string; // URL for "Leave a review" button
  useLeafDecoration?: boolean; // Whether to use leaf-shaped decorations
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  testimonials = [],
  callToAction,
  googleBranding = true,
  totalReviews,
  reviewUrl,
  useLeafDecoration = true,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Helper to render stars based on rating
const renderStars = (rating?: number) => {
  if (rating === undefined) {
    return { full: [], half: [], empty: [] };
  }
  
  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 >= 0.5;
  const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
  
  return {
    full: Array(fullStars).fill(null),
    half: hasHalfStar ? [null] : [],
    empty: Array(emptyStars).fill(null)
  };
};
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl mb-8',
      title: 'text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading',
      subtitle: 'max-w-3xl mx-auto sm:text-center text-xl text-muted',
    }}
  />

  {/* Google review summary banner - Only shown if totalReviews is provided */}
  {totalReviews && totalReviews.average !== undefined && totalReviews.count !== undefined && (
    <div class="mb-12 bg-white dark:bg-transparent rounded-xl shadow-md overflow-hidden border border-gray-100 dark:border-gray-800">
      <div class="flex flex-col md:flex-row items-center justify-between p-6 md:px-10">
        <div class="flex items-center mb-4 md:mb-0">
          {googleBranding && (
            <div class="mr-4 flex-shrink-0">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="48" height="48" class="w-12 h-12">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
            </div>
          )}
          <div>
            <h3 class="text-2xl font-bold dark:text-white">Google Reviews</h3>
            <div class="flex items-center mt-1">
              <div class="flex">
                {renderStars(totalReviews.average).full.map(() => (
                  <Icon name="tabler:star-filled" class="w-6 h-6 text-yellow-400" />
                ))}
                {renderStars(totalReviews.average).half.map(() => (
                  <Icon name="tabler:star-half-filled" class="w-6 h-6 text-yellow-400" />
                ))}
                {renderStars(totalReviews.average).empty.map(() => (
                  <Icon name="tabler:star" class="w-6 h-6 text-yellow-400" />
                ))}
              </div>
              <span class="ml-2 text-lg font-bold text-gray-900 dark:text-white">{totalReviews.average.toFixed(1)}</span>
              <span class="ml-2 text-gray-600 dark:text-gray-400">({totalReviews.count} reviews)</span>
            </div>
          </div>
        </div>
        
        {reviewUrl && (
          <Button 
            variant="primary" 
            href={reviewUrl}
            target="_blank"
            text="Leave a Review"
            icon="tabler:message-star"
          />
        )}
      </div>
    </div>
  )}

  <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
    {testimonials.map((testimonial) => {
      const stars = renderStars(testimonial.rating);
      return (
        <div class={`relative flex h-full flex-col p-6 bg-white dark:bg-transparent rounded-xl shadow-md overflow-hidden border ${testimonial.highlight ? 'border-primary/50 dark:border-primary/40' : 'border-gray-100 dark:border-gray-800'} transition-all duration-300 hover:shadow-lg intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade`}>
          {/* Decorative elements for landscaping theme */}
          {useLeafDecoration && (
            <>
              <div class="absolute -top-2 -right-2 w-12 h-12 bg-green-100 dark:bg-green-900/20 rounded-full z-0 opacity-50"></div>
              {testimonial.highlight && (
                <div class="absolute bottom-0 left-0 w-24 h-24 bg-green-50 dark:bg-green-900/10 -z-10 rounded-tr-full"></div>
              )}
            </>
          )}
          
          {/* Source badge (Google, Facebook, etc.) */}
          {testimonial.source && (
            <div class="absolute top-4 right-4 bg-gray-100 dark:bg-gray-800 rounded-full px-3 py-1 text-xs font-medium text-gray-800 dark:text-gray-200">
              {testimonial.source === "Google" && (
                <div class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="14" height="14" class="inline-block mr-1">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                  </svg>
                  Google
                </div>
              )}
              {testimonial.source !== "Google" && testimonial.source}
            </div>
          )}

          {/* Stars */}
          {testimonial.rating !== undefined && (
            <div class="flex mb-3">
              {stars.full.map(() => (
                <Icon name="tabler:star-filled" class="w-5 h-5 text-yellow-400" />
              ))}
              {stars.half.map(() => (
                <Icon name="tabler:star-half-filled" class="w-5 h-5 text-yellow-400" />
              ))}
              {stars.empty.map(() => (
                <Icon name="tabler:star" class="w-5 h-5 text-yellow-400" />
              ))}
            </div>
          )}

          {/* Testimonial */}
          {testimonial.testimonial && (
            <div class="flex-grow mb-6 relative z-10">
              <p class="text-gray-700 dark:text-slate-300">{testimonial.testimonial}</p>
            </div>
          )}

          {/* Reviewer info */}
          {(testimonial.name || testimonial.job || testimonial.date || testimonial.verifiedCustomer) && (
            <div class="flex flex-col border-t border-gray-100 dark:border-gray-800 pt-4 mt-auto relative z-10">
              {testimonial.name && (
                <div class="flex items-center">
                  <p class="font-semibold text-gray-900 dark:text-white">
                    {testimonial.name}
                  </p>
                  {testimonial.verifiedCustomer && (
                    <div class="ml-2 flex items-center text-xs text-green-600 dark:text-green-400">
                      <Icon name="tabler:check" class="w-4 h-4 mr-1" />
                      <span>Verified</span>
                    </div>
                  )}
                </div>
              )}
              
              <div class="flex flex-wrap items-center text-sm text-gray-500 dark:text-gray-400 mt-2">
                {testimonial.job && (
                  <span class="mr-3 flex items-center">
                    <Icon name="tabler:briefcase" class="w-4 h-4 mr-1 text-primary/70" />
                    {testimonial.job}
                  </span>
                )}
                {testimonial.date && (
                  <span class="flex items-center">
                    <Icon name="tabler:calendar" class="w-4 h-4 mr-1 text-primary/70" />
                    {testimonial.date}
                  </span>
                )}
              </div>
            </div>
          )}
        </div>
      )
    })}
  </div>

  {/* Call to Action Button */}
  {callToAction && callToAction.text && callToAction.href && (
    <div class="flex justify-center mt-8">
      <Button
        variant="primary"
        {...callToAction}
      />
    </div>
  )}
</WidgetWrapper>