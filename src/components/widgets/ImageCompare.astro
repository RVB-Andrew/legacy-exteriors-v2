---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { findImage } from '~/utils/images';
import type { ImageMetadata } from 'astro';
import type { Widget } from '~/types';

export interface Props extends Widget {
  beforeImage: {
    src: string | ImageMetadata;
    alt?: string;
    label?: string;
  };
  afterImage: {
    src: string | ImageMetadata;
    alt?: string;
    label?: string;
  };
  startingPosition?: number;
  className?: string;
  aspectRatio?: string;
  height?: string;
}

const {
  beforeImage,
  afterImage,
  startingPosition = 50,
  className = '',
  aspectRatio = '16:9',
  height = 'h-96',
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Process images through findImage utility for proper path resolution
const processedBeforeImage = await findImage(beforeImage.src);
const processedAfterImage = await findImage(afterImage.src);

// Helper function to get image source
const getImageSrc = (image: string | ImageMetadata | null | undefined) => {
  if (!image) return '';
  if (typeof image === 'string') return image;
  return image.src;
};

// Define aspect ratio values
const aspectRatioMap: { [key: string]: string } = {
  '16:9': 'aspect-video',
  '4:3': 'aspect-[4/3]',
  '3:2': 'aspect-[3/2]',
  '1:1': 'aspect-square',
  '21:9': 'aspect-[21/9]',
};

const aspectClass = aspectRatioMap[aspectRatio] || 'aspect-video';

// Generate unique ID for this instance
const comparisonId = `image-compare-${Math.random().toString(36).substr(2, 9)}`;

// Get label options if provided
const beforeLabel = beforeImage.label || 'Before';
const afterLabel = afterImage.label || 'After';
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-4xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div class={`relative ${aspectClass} ${height} ${className}`}>
    <div 
      id={comparisonId} 
      class="image-compare shadow-lg rounded mb-12 icv icv__icv--horizontal standard"
      data-before-label={beforeLabel}
      data-after-label={afterLabel}
      data-starting-position={startingPosition}
    >
      <img src={getImageSrc(processedBeforeImage)} alt={beforeImage.alt || "Before image"} />
      <img src={getImageSrc(processedAfterImage)} alt={afterImage.alt || "After image"} />
    </div>
  </div>
  
  <slot />
</WidgetWrapper>

<!-- Initialize the image comparison viewer -->
<script>
  import ImageCompare from 'image-compare-viewer';
  
  function initImageComparisons() {
    const containers = document.querySelectorAll('.image-compare');
    
    containers.forEach((container) => {
      // Get the labels from the container's data attributes
      const containerElement = container as HTMLElement;
      const beforeLabel = containerElement.dataset.beforeLabel || 'Before';
      const afterLabel = containerElement.dataset.afterLabel || 'After';
      const startingPosition = parseInt(containerElement.dataset.startingPosition || '50');
      
      // Create and mount the viewer - save it if you need to access it later
      new ImageCompare(container as HTMLElement, {
        // Options
        controlColor: '#ffffff',
        controlShadow: true,
        showLabels: true,
        labelOptions: {
          before: beforeLabel,
          after: afterLabel,
          onHover: false
        },
        smoothing: false, // Disable smoothing to prevent image scaling
        smoothingAmount: 0,
        hoverStart: false,
        verticalMode: false,
        startingPoint: startingPosition
      }).mount();
    });
  }

  // Initialize when the DOM is ready
  document.addEventListener('DOMContentLoaded', initImageComparisons);
  
  // Initialize on Astro page transitions if using View Transitions
  document.addEventListener('astro:page-load', initImageComparisons);
</script>

<style is:global>
  /* Import image-compare-viewer styles */
  @import "image-compare-viewer/dist/image-compare-viewer.min.css";
  
  /* Additional custom styling */
  .image-compare {
    width: 100%;
    height: 100%;
  }
  
  .image-compare img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transform: none !important; /* Prevent any image zooming/scaling */
  }
  
  .icv {
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  }
  
  .icv__label {
    background-color: var(--aw-color-primary) !important; /* Use primary green color */
    padding: 0.5rem 1rem !important;
    border-radius: 0.375rem !important;
    font-size: 0.875rem !important;
    font-weight: 500 !important;
    font-family: var(--aw-font-heading) !important; /* Use heading font */
  }
  
  /* Style the control but let it position naturally */
  .icv__control {
    width: 40px !important;
    height: 40px !important;
    border-radius: 9999px !important;
    background-color: var(--aw-color-primary) !important; /* Use primary green color */
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.2), 0 2px 4px -2px rgb(0 0 0 / 0.2) !important;
    top: 50% !important; /* Move to vertical center */
    transform: translateY(-50%) !important; /* Only center vertically */
  }
  
  /* Style the line */
  .icv__control-line {
    background-color: #ffffff !important;
    width: 3px !important;
    height: 100% !important; /* Extend the line to full height */
  }
</style>