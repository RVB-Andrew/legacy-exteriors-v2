---
import type { Form as Props } from '~/types';
import { Icon } from 'astro-icon/components';

// No need to modify types.d.ts - we'll handle the additional props here
const { 
  inputs, 
  textarea, 
  disclaimer, 
  button = 'Contact us', 
  description = '', 
  services = [],
} = Astro.props;

// Add your keys directly here
const WEB3FORMS_ACCESS_KEY = '928584ff-8a35-4f6e-88c9-c1a78ad2c298';

// Default services if none provided
const defaultServices = [
  { value: 'excavation', label: 'Excavation & Site Preparation', icon: 'tabler:bulldozer' },
  { value: 'drainage', label: 'Drainage Solutions', icon: 'tabler:droplet' },
  { value: 'trenching', label: 'Utility & Drainage Trenching', icon: 'tabler:line-dashed' },
  { value: 'driveways', label: 'Driveway Installation & Repair', icon: 'tabler:road' },
  { value: 'landscaping', label: 'Landscape Grading & Preparation', icon: 'tabler:plant' },
  { value: 'sod', label: 'Sod Installation', icon: 'tabler:garden-cart' },
  { value: 'other', label: 'Other Services', icon: 'tabler:tools' }
];

const serviceOptions = services.length > 0 ? services : defaultServices;
---

<!-- Add reCAPTCHA v3 script with hardcoded site key -->
<script src="https://www.google.com/recaptcha/api.js?render=6LcFIE4pAAAAAJgE-F1xkQJU9MF0PNrjoXRfz9FA"></script>

<form
  action="https://api.web3forms.com/submit"
  method="POST"
  id="contact-form"
  class="relative p-4 rounded-lg border border-green-800/50 bg-[#050505] overflow-hidden needs-validation"
  novalidate
>
  <!-- Web3Forms required fields -->
  <input type="hidden" name="access_key" value={WEB3FORMS_ACCESS_KEY} />
  <input type="hidden" name="botcheck" style="display:none" />
  <input type="hidden" name="g-recaptcha-response" id="g-recaptcha-response" />
  
  <!-- Decorative elements -->
  <div class="absolute top-0 right-0 w-40 h-40 bg-green-900/20 rounded-full -mt-20 -mr-20 z-0"></div>
  <div class="absolute bottom-0 left-0 w-40 h-40 bg-green-900/10 rounded-full -mb-20 -ml-20 z-0"></div>
  <div class="absolute top-1/4 left-10 w-6 h-6 bg-green-600/10 rounded-full z-0"></div>
  <div class="absolute bottom-1/3 right-10 w-8 h-8 bg-green-600/10 rounded-full z-0"></div>
  
  <!-- Form header with subtle green light effect -->
  <div class="relative z-10 mb-8 text-center">
    <div class="absolute -top-6 left-1/2 transform -translate-x-1/2 w-32 h-32 bg-green-700/25 rounded-full blur-3xl"></div>
    <h3 class="text-2xl font-bold text-white mb-2 font-heading">Let's Get Started</h3>
    <p class="text-green-400 text-sm">Tell us about your project.</p>
  </div>
  
  <div class="relative z-10">
    {
      inputs &&
        inputs.map(
          ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }, index) =>
            name && (
              <div class="mb-6 transition-all duration-300 hover:translate-x-1" style={{ animationDelay: `${index * 100}ms` }}>
                {label && (
                  <label for={name} class="flex items-center text-sm font-medium text-green-400 mb-2">
                    {name === 'name' && <Icon name="tabler:user" class="w-4 h-4 mr-2 inline-block" />}
                    {name === 'email' && <Icon name="tabler:mail" class="w-4 h-4 mr-2 inline-block" />}
                    {name === 'phone' && <Icon name="tabler:phone" class="w-4 h-4 mr-2 inline-block" />}
                    {label}
                  </label>
                )}
                <input
                  type={type}
                  name={name}
                  id={name}
                  autocomplete={autocomplete}
                  placeholder={placeholder}
                  required
                  class="py-3 px-4 block w-full text-md rounded-lg border-2 border-gray-800 hover:border-green-900 bg-[#0a0a0a] text-white placeholder-gray-500 focus:outline-none focus:border-green-600 focus:ring-2 focus:ring-green-600/50 transition-all duration-300"
                />
                <div class="empty-feedback text-red-400 text-sm mt-1">
                  Please provide your {label.toLowerCase() || name}.
                </div>
                <div class="invalid-feedback text-red-400 text-sm mt-1">
                  Please provide a valid {label.toLowerCase() || name}.
                </div>
              </div>
            )
        )
    }

    <!-- Service Selection Dropdown with visual enhancements -->
    <div class="mb-6 group transition-all duration-300 hover:translate-x-1">
      <label for="service" class="flex items-center text-sm font-medium text-green-400 mb-2">
        <Icon name="tabler:list-check" class="w-4 h-4 mr-2 inline-block" />
        Service Needed
      </label>
      <div class="relative">
        <select
          id="service"
          name="service"
          class="appearance-none py-3 px-4 block w-full text-md rounded-lg border-2 border-gray-800 hover:border-green-900 bg-[#0a0a0a] text-white placeholder-gray-500 focus:outline-none focus:border-green-600 focus:ring-2 focus:ring-green-600/50 transition-all duration-300"
          required
        >
          <option value="" disabled selected>Select a service</option>
          {serviceOptions.map((service) => (
            <option value={service.value}>{service.label}</option>
          ))}
        </select>
        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
          <Icon name="tabler:chevron-down" class="w-5 h-5 group-hover:text-green-500 transition-colors duration-300" />
        </div>
      </div>
      <div class="empty-feedback text-red-400 text-sm mt-1">
        Please select a service.
      </div>
    </div>

    {
      textarea && (
        <div class="mb-6 transition-all duration-300 hover:translate-x-1">
          <label for="textarea" class="flex items-center text-sm font-medium text-green-400 mb-2">
            <Icon name="tabler:message" class="w-4 h-4 mr-2 inline-block" />
            {textarea.label}
          </label>
          <textarea
            id="textarea"
            name={textarea.name ? textarea.name : 'message'}
            rows={textarea.rows ? textarea.rows : 4}
            placeholder={textarea.placeholder}
            required
            class="py-3 px-4 block w-full text-md rounded-lg border-2 border-gray-800 hover:border-green-900 bg-[#0a0a0a] text-white placeholder-gray-500 focus:outline-none focus:border-green-600 focus:ring-2 focus:ring-green-600/50 resize-none transition-all duration-300"
          ></textarea>
          <div class="empty-feedback text-red-400 text-sm mt-1">
            Please enter your message.
          </div>
        </div>
      )
    }

    {
      disclaimer && (
        <div class="mt-6 flex items-start group transition-opacity duration-300 hover:opacity-90">
          <div class="flex items-center h-5">
            <input
              id="disclaimer"
              name="disclaimer"
              type="checkbox"
              required
              class="w-5 h-5 rounded text-green-600 border-gray-800 bg-[#0a0a0a] focus:ring-green-500 focus:ring-offset-0 transition-colors duration-300"
            />
          </div>
          <div class="ml-3">
            <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-400 group-hover:text-gray-300 transition-colors duration-300">
              {disclaimer.label}
            </label>
          </div>
          <div class="empty-feedback text-red-400 text-sm mt-1">
            Please accept the terms.
          </div>
        </div>
      )
    }

    {
      button && (
        <div class="mt-8 relative">
          <div class="absolute inset-0 bg-gradient-to-r from-green-600/20 to-green-900/20 blur-lg transform group-hover:scale-105 transition-all duration-300"></div>
          <button 
            type="submit" 
            class="relative w-full px-6 py-3.5 bg-gradient-to-r from-green-700 to-green-900 text-white font-medium rounded-lg overflow-hidden transition-all duration-500 hover:from-green-600 hover:to-green-800 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-[#050505] group"
          >
            <div class="absolute inset-0 w-0 bg-white/10 transition-all duration-500 ease-out group-hover:w-full"></div>
            <div class="relative flex items-center justify-center">
              <span>{button}</span>
              <Icon name="tabler:send" class="w-5 h-5 ml-2 transform group-hover:translate-x-1 transition-transform duration-300" />
            </div>
          </button>
        </div>
      )
    }

    <div id="result" class="mt-4 text-center"></div>

    {
      description && (
        <div class="mt-4 text-center">
          <p class="text-sm text-gray-500">{description}</p>
        </div>
      )
    }
  </div>
</form>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  /* Show feedback for manually marked invalid fields too */
  .is-invalid ~ .empty-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }

  /* Subtle pulsing highlight effect on form focus */
  form:focus-within::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, #04582380, transparent, #04582380);
    border-radius: 0.5rem;
    z-index: -1;
    animation: pulse 2s ease-in-out infinite;
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 0.5;
    }
    50% {
      opacity: 0.8;
    }
  }

  /* Smooth animations for form interactions */
  form input, form select, form textarea {
    transition: all 0.3s ease;
  }

  form input:focus, form select:focus, form textarea:focus {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(4, 88, 35, 0.15);
  }
</style>

<script>
// Add grecaptcha to global window interface to prevent TypeScript errors
declare global {
  interface Window {
    grecaptcha: {
      ready: (callback: () => void) => void;
      execute: (siteKey: string, options: {action: string}) => Promise<string>;
    };
    fs: {
      readFile: (path: string, options?: {encoding?: string}) => Promise<unknown>;
    };
  }
}

document.addEventListener("DOMContentLoaded", () => {
  // Get form and result elements with type assertions and proper null checks
  const form = document.getElementById("contact-form") as HTMLFormElement;
  const result = document.getElementById("result");

  if (!form || !result) {
    console.error("Required form elements not found");
    return;
  }

  form.addEventListener("submit", function (e) {
    e.preventDefault();
    form.classList.add("was-validated");
    
    // Enhanced validation - check all required fields
    let isValid = true;
    const requiredFields = form.querySelectorAll('[required]');
    
    requiredFields.forEach((field) => {
      const inputField = field as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
      
      // Check if the field is empty or (for selects) has an empty value
      if (!inputField.value || inputField.value.trim() === '') {
        isValid = false;
        inputField.classList.add('is-invalid');
        // Find the nearest feedback element
        const feedback = inputField.parentElement?.querySelector('.empty-feedback');
        if (feedback) {
          feedback.setAttribute('style', 'display: block;');
        }
      } else {
        inputField.classList.remove('is-invalid');
      }
    });
    
    if (!isValid || !form.checkValidity()) {
      const invalidInputs = form.querySelectorAll(".is-invalid, :invalid");
      if (invalidInputs.length > 0) {
        (invalidInputs[0] as HTMLElement).focus();
      }
      return;
    }
    
    // Execute reCAPTCHA verification with hardcoded site key
    window.grecaptcha.ready(function() {
      window.grecaptcha.execute('6LcFIE4pAAAAAJgE-F1xkQJU9MF0PNrjoXRfz9FA', {action: 'submit'})
        .then(function(token: string) {
          // Add the token to the form
          const recaptchaInput = document.getElementById('g-recaptcha-response') as HTMLInputElement;
          if (recaptchaInput) {
            recaptchaInput.value = token;
          }
          
          // Continue with form submission
          submitForm();
        })
        .catch(error => {
          console.error("reCAPTCHA error:", error);
          result.innerHTML = '<span class="text-red-500">reCAPTCHA verification failed</span>';
        });
    });
    
    function submitForm() {
      if (!form || !result) return;
      
      // Perform one final check to prevent empty submissions
      const requiredFields = form.querySelectorAll('[required]');
      let hasEmptyFields = false;
      
      requiredFields.forEach((field) => {
        const inputField = field as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
        if (!inputField.value || inputField.value.trim() === '') {
          hasEmptyFields = true;
        }
      });
      
      if (hasEmptyFields) {
        result.innerHTML = '<span class="text-red-500">Please fill in all required fields</span>';
        return;
      }
      
      const formData = new FormData(form);
      const object: Record<string, unknown> = {}; // Using unknown instead of any
      formData.forEach((value, key) => {
        object[key] = value;
      });
      const jsonData = JSON.stringify(object);

      result.innerHTML = '<span class="text-white">Sending...</span>';

      fetch("https://api.web3forms.com/submit", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: jsonData,
      })
        .then(async (response) => {
          if (!result) return;
          
          const jsonResponse = await response.json();
          if (response.status == 200) {
            result.classList.add("text-green-500");
            result.innerHTML = jsonResponse.message;
          } else {
            console.log(response);
            result.classList.add("text-red-500");
            result.innerHTML = jsonResponse.message || "Something went wrong!";
          }
        })
        .catch((error) => {
          if (!result) return;
          
          console.log(error);
          result.classList.add("text-red-500");
          result.innerHTML = "Something went wrong!";
        })
        .finally(function () {
          if (!form || !result) return;
          
          form.reset();
          form.classList.remove("was-validated");
          setTimeout(() => {
            if (result) {
              result.innerHTML = "";
              result.className = "mt-4 text-center"; // Reset classes
            }
          }, 5000);
        });
    }
  });
});
</script>